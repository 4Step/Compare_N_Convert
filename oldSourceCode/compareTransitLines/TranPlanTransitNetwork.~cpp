//---------------------------------------------------------------------------
#pragma hdrstop

#include "TranPlanTransitNetwork.h"
#include "stdutil.h"
#include "DynamArrays.h"

// constructor w/o an input file
TranPlanTransitNetwork::TranPlanTransitNetwork(void)
{
   Lines.Length=0;
   numberOfLines=0;

}

// constructor with an input file
TranPlanTransitNetwork::TranPlanTransitNetwork(char *n)
{
   if((this->fptr=fopen(n,"r"))==NULL)
   {
      cout<<"\n\nError: Could not open 'InputFile' file ("<<n;
      cout<<") for reading.\n";
      cout<<"\n\tProgram will terminate.\n";
      exit(1);
   }

   Lines.Length=0;
   numberOfLines=0;
   strcpy(name,n);
}

// utility to add a new line
void TranPlanTransitNetwork::addLine(void)
{
   numberOfLines++;
   Lines.Length++;
}

// utility to return the number of lines
int TranPlanTransitNetwork::getNumberOfLines(void)
{
   return(numberOfLines);
}



// compare two networks
void TranPlanTransitNetwork::compareItineraries(TranPlanTransitNetwork* compare, FILE *ptr)
{
   fprintf(ptr,"\n\n");
   fprintf(ptr,"          Comparison of Transit Networks\n");
   fprintf(ptr,"  ----------------------------------------------\n\n");

   // check the modes present
   unsigned long int tempUs=0;
   int temp=0;
   int place=0;
   bool haveIt;
   T2DIntArray modes;
   T2DIntArray numModes;

   modes.Length=2;
   numModes.Length=2;


   // find the modes present for the baseline network
   modes[0].Length = 0;
   numModes[0].Length = 0;

   for(int i=0;i<this->getNumberOfLines();++i)
   {
      // store the mode of each line in temp
      tempUs=this->Lines[i].getMode();

      haveIt=false;
      for(int j=0;j<modes[0].Length;++j)
      {
         if(tempUs==modes[0][j])
         {
            haveIt=true;
            numModes[0][j]++;
         }
      }

      if(!haveIt)
      {
         modes[0].Length++;
         numModes[0].Length++;

         place = modes[0].Length-1;

         modes[0][place] = tempUs;
         numModes[0][place] = 1;

      } // end If not haveIt

   } // end count through lines



   // find the modes present in the compare network
   modes[1].Length = 0;
   numModes[1].Length = 0;

   for(int i=0;i<compare->getNumberOfLines();++i)
   {
      // store the mode of each line in temp
      tempUs=compare->Lines[i].getMode();

      haveIt=false;
      for(int j=0;j<modes[1].Length;++j)
      {
         if(tempUs==modes[1][j])
         {
            haveIt=true;
            numModes[1][j]++;
         }
      }

      if(!haveIt)
      {
         modes[1].Length++;
         numModes[1].Length++;

         place = modes[1].Length-1;

         modes[1][place] = tempUs;
         numModes[1][place] = 1;

      } // end If not haveIt

   } // end count through lines

   // print out the basics
   // base network
   fprintf(ptr,"\nBase Network\n");
   fprintf(ptr,  "------------\n");
   fprintf(ptr,"Network Name   : %-40s\n",this->name);
   fprintf(ptr,"Number of Lines: %6d\n",this->getNumberOfLines());

   fprintf(ptr,"Modes Present  :");
   for(int i=0;i<modes[0].Length;++i)
   {
      fprintf(ptr,"%5d,",modes[0][i]);
   }

   fprintf(ptr,"\nLines Per Mode :");
   for(int i=0;i<numModes[0].Length;++i)
   {
      fprintf(ptr,"%5d,",numModes[0][i]);
   }
   fprintf(ptr,"\n");

   // compare network
   fprintf(ptr,"\nCompare Network\n");
   fprintf(ptr,  "------------\n");
   fprintf(ptr,"Network Name   : %-40s\n",compare->name);
   fprintf(ptr,"Number of Lines: %6d\n",compare->getNumberOfLines());

   fprintf(ptr,"Modes Present  :");
   for(int i=0;i<modes[1].Length;++i)
   {
      fprintf(ptr,"%5d,",modes[1][i]);
   }

   fprintf(ptr,"\nLines Per Mode :");
   for(int i=0;i<numModes[1].Length;++i)
   {
      fprintf(ptr,"%5d,",numModes[1][i]);
   }
   fprintf(ptr,"\n");

   // compare transit lines
   fprintf(ptr,"\n\n");
   fprintf(ptr,"           Comparison of Transit Lines\n");
   fprintf(ptr,"  ----------------------------------------------\n\n");

   fprintf(ptr,"\n Transit Lines included in Base network but not in Compare network\n");
   fprintf(ptr,  " -----------------------------------------------------------------\n\n");

   bool clear;
   bool allClear;
   allClear = true;
   for(int i=0;i<this->getNumberOfLines();++i)
   {
      // get unique Id
      temp = this->Lines[i].getUniqueId();

      clear = false;
      for(int j=0;j<compare->getNumberOfLines();++j)
      {
         if(temp == compare->Lines[j].getUniqueId() )
         {
            clear = true;
            break;
         }
      }

      if (!clear)
      {
         allClear = false;

         fprintf(ptr," Line # / Mode # : %8d / %8d\n",this->Lines[i].getLine(),
                                                   this->Lines[i].getMode() );

      }
   }

   if(allClear) fprintf(ptr," No Transit Lines in Base Network not in Compare Network\n");


   // check vice versa
   fprintf(ptr,"\n\n Transit Lines included in Compare network but not in Base network\n");
   fprintf(ptr,  " -----------------------------------------------------------------\n\n");

   allClear = true;
   for(int i=0;i<compare->getNumberOfLines();++i)
   {
      // get unique Id
      temp = compare->Lines[i].getUniqueId();

      clear = false;
      for(int j=0;j<this->getNumberOfLines();++j)
      {
         if(temp == this->Lines[j].getUniqueId() )
         {
            clear = true;
            break;
         }
      }

      if (!clear)
      {
         allClear = false;

         fprintf(ptr," Line # / Mode # : %8d / %8d\n",compare->Lines[i].getLine(),
                                                   compare->Lines[i].getMode() );

      }
   }

   if(allClear) fprintf(ptr," No Transit Lines in Compare Network not in Base Network\n");


   // compare itineraries
   fprintf(ptr,"\n\n");
   fprintf(ptr,"   Comparison of Transit Itineraries (for lines in both networks)\n");
   fprintf(ptr,"-------------------------------------------------------------------\n\n");

   int jPlace, bNode, cNode;
   bool match;

   allClear = true;
   for(int i=0;i<this->getNumberOfLines();++i)
   {
      match = false;
      for(int j=0;j<compare->getNumberOfLines();++j)
      {
         if(this->Lines[i].getUniqueId() == compare->Lines[j].getUniqueId() )
         {
            jPlace = j;
            match = true;
            break;
         }
      } // end j

      if (match)
      {
         clear = true;
         for(int k=0;k<this->Lines[i].getNumberOfNodes();++k)
         {
            bNode = this->Lines[i].getNode(k);
            cNode = compare->Lines[jPlace].getNode(k);

            if( (bNode != cNode) || bNode==-999999 || cNode==-999999 )
            {
               clear = false;
               break;
            }
         } // end k

         if (clear) this->Lines[i].setIdentical(true);

      } // end if match

      if(!clear)
      {
         allClear = false;
         fprintf(ptr,"\n");
         fprintf(ptr," Itinerary Mismatch for Line = %6d, Mode = %6d\n",
                       this->Lines[i].getLine(),this->Lines[i].getMode());
         fprintf(ptr,"      Base Network Itinerary    = ");
         this->Lines[i].printNodes(ptr);
         fprintf(ptr,"\n");
         fprintf(ptr,"      Compare Network Itinerary = ");
         compare->Lines[jPlace].printNodes(ptr);
         fprintf(ptr,"\n");
      }

   } // end i

   if(allClear) fprintf(ptr," No Transit Itinerary Differences\n");

   // compare headways
   fprintf(ptr,"\n\n");
   fprintf(ptr,"   Comparison of Transit Headways (for lines in both networks)\n");
   fprintf(ptr,"-------------------------------------------------------------------\n\n");

   float tempDiff;

   allClear = true;
   for(int i=0;i<this->getNumberOfLines();++i)
   {
      match = false;
      for(int j=0;j<compare->getNumberOfLines();++j)
      {
         if(this->Lines[i].getUniqueId() == compare->Lines[j].getUniqueId() )
         {
            jPlace = j;
            match = true;
            break;
         }
      } // end j

      if (match)
      {
         tempDiff = 0.0;
         tempDiff = this->Lines[i].getHeadway() - compare->Lines[jPlace].getHeadway();
         if(tempDiff<0.00) tempDiff = - tempDiff;

         if(tempDiff>0.1) clear = false;
         else clear = true;
      }

      if(!clear)
      {
         allClear = false;
         fprintf(ptr,"\n");
         fprintf(ptr," Headway Mismatch for Line = %6d, Mode = %6d\n",
                       this->Lines[i].getLine(),this->Lines[i].getMode());
         fprintf(ptr,"      Base Network Headway    = ");
         this->Lines[i].printHeadway(ptr);
         fprintf(ptr,"\n");
         fprintf(ptr,"      Compare Network Headway = ");
         compare->Lines[jPlace].printHeadway(ptr);
         fprintf(ptr,"\n");
      }

   } // end i

   if(allClear) fprintf(ptr," No Transit Headway Differences\n");

   // print out the lines which are identical

   fprintf(ptr,"\n\n\n");
   fprintf(ptr,"   Transit Lines in both networks with Identical Itineraries\n");
   fprintf(ptr,"-------------------------------------------------------------------\n\n");

   clear = true;
   for(int i=0;i<this->getNumberOfLines();++i)
   {
      if(this->Lines[i].getIdentical())
      {

         clear = false;
         fprintf(ptr," Line # / Mode # : %8d / %8d\n",this->Lines[i].getLine(),
                                                      this->Lines[i].getMode() );

      }

   } // end i

   if(clear) fprintf(ptr," No Identical Transit Itineraries \n\n");



}

// read in TranPlan INET cards from fptr with debug output written to optr
void TranPlanTransitNetwork::readLines(bool debug, FILE *optr)
{

   char buffer[120];
   char idName[120];
   char temp[15];

   int c1,c2,slen;
   int place=0;
   int prevNode,currentNode;

   bool first;
   bool foundNodes=false;

   first = true;
   while(fgets(buffer,120,this->fptr) != NULL)
   {
      c1 = 0;
      slen = strlen(buffer);

      // search for Route
      if(str_index(buffer,"&ROUTE") >= 0)
      {
         // print last stuff
         if(!first && debug) Lines[place].printRoute(optr);

         // set found nodes switch
         foundNodes=false;

         // add a line
         addLine();
         place = Lines.Length - 1;

         // declare the line to be added to the array
         TranPlanTransitLine tempLine;

         Lines[place] = tempLine;

         Lines[place].initialize();

         if(first && debug)
         {
            Lines[place].printHeader(optr,this->name);
            first = false;
         }

      } // end Route check


      // search for line number
      if( (c1=(str_index(buffer,"L=")))>=0)
      {
         if(Lines[place].getLine()!=0) continue;

         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setLine(atoi(temp));
      } // end line if

      // search for line mode
      if( (c1=(str_index(buffer,"M=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setMode(atoi(temp));
      } // end mode if

      // search for company mode
      if( (c1=(str_index(buffer,"C=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setCompany(atoi(temp));
      } // end company if

      // search for headway
      if( (c1=(str_index(buffer,"H=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setHeadway(atof(temp));
      } // end Headway if

      // search for rg
      if( (c1=(str_index(buffer,"RG=")))>=0)
      {
         c1+=3;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setRg(atoi(temp));
      } // end RG if

      // search for line ID
      if( (c1=(str_index(buffer,"ID=")))>=0)
      {
         c1+=3;
         c2=c1;

         while( (buffer[c2]!='\'') && (c2<slen) ) c2++;

         c2++;
         c1=c2;

         while( (buffer[c2]!='\'') && (c2<slen) ) c2++;

         strncpy(idName,&buffer[c1],(c2-c1));
         idName[c2-c1] = '\0';

         Lines[place].setId(idName);
      } // end ID if

      // search for nodes
      if( (c1=(str_index(buffer,"N=")))>=0)
      {
         foundNodes=true;
         c1+=2;
         c2=c1;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';
         c1 = c2 + 1;

         Lines[place].addNode(atoi(temp));

         prevNode = atoi(temp);

      } // end if nodes

      while(c1<slen && foundNodes)
      {
         c2=c1;

         while( ( (buffer[c2]!='-') && (!isdigit(buffer[c2])) && (c2<slen) )) c2++;

         c1 = c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1]='\0';
         c1 = c2 + 1;

         Lines[place].addNode(atoi(temp));

         currentNode = atoi(temp);

         if(currentNode==0 && prevNode==0)
         {
            foundNodes = false;
            break;
         }

         prevNode = currentNode;


      } // while c1<slen

   } // while ! EOF

   // print lingering line
   if(debug) Lines[place].printRoute(optr);

   // compute unique Id for each
   for(int i=0;i<Lines.Length;++i) Lines[i].computeUniqueId();

   // print some feedback
   cout<<"\n\n   "<<Lines.Length<<" Transit Lines read from Transit Network: ";
   cout<<this->name<<"\n";

}

// read in the TranPlan INET line cards from fptr without any debug output
void TranPlanTransitNetwork::readLines(void)
{

   char buffer[120];
   char idName[120];
   char temp[15];

   int c1,c2,slen,n;
   int place=0;

   bool foundNodes;

   while(fgets(buffer,120,this->fptr) != NULL)
   {
      c1 = 0;
      slen = strlen(buffer);

      // search for Route
      if(str_index(buffer,"&ROUTE") >= 0)
      {

         // set found nodes switch
         foundNodes=false;

         // add a line
         addLine();
         place = Lines.Length - 1;

         // declare the line to be added to the array
         TranPlanTransitLine tempLine;

         Lines[place] = tempLine;

         Lines[place].initialize();

      } // end Route check


      // search for line number
      if( (c1=(str_index(buffer,"L=")))>=0)
      {
         if(Lines[place].getLine()!=0) continue;

         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setLine(atoi(temp));
      } // end line if

      // search for line mode
      if( (c1=(str_index(buffer,"M=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setMode(atoi(temp));
      } // end mode if

      // search for company mode
      if( (c1=(str_index(buffer,"C=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setCompany(atoi(temp));
      } // end company if

      // search for headway
      if( (c1=(str_index(buffer,"H=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setHeadway(atof(temp));
      } // end Headway if

      // search for rg
      if( (c1=(str_index(buffer,"RG=")))>=0)
      {
         c1+=3;
         c2=c1;

         while( (buffer[c2]==' ') && (c2<slen) ) c2++;

         c1=c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';

         Lines[place].setRg(atoi(temp));
      } // end RG if

      // search for line ID
      if( (c1=(str_index(buffer,"ID=")))>=0)
      {
         c1+=2;
         c2=c1;

         while( (buffer[c2]!='\'') && (c2<slen) ) c2++;

         c2++;
         c1=c2;

         while( (buffer[c2]!='\'') && (c2<slen) ) c2++;

         strncpy(idName,&buffer[c1],(c2-c1));
         idName[c2-c1] = '\0';

         Lines[place].setId(idName);
      } // end ID if

      // search for nodes
      if( (n=(str_index(buffer,"N=")))>=0)
      {
         foundNodes=true;
         c1=n+2;
         c2=c1;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1] = '\0';
         c1 = c2 + 1;

         Lines[place].addNode(atoi(temp));
      } // end if nodes

      while(c1<slen && foundNodes)
      {
         c2=c1;

         while( ( (buffer[c2]!='-') && (!isdigit(buffer[c2])) && (c2<slen) )) c2++;

         c1 = c2;

         while( (buffer[c2]!=',') && (c2<slen) ) c2++;

         strncpy(temp,&buffer[c1],(c2-c1));
         temp[c2-c1]='\0';
         c1 = c2 + 1;

         Lines[place].addNode(atoi(temp));

      } // while c1<slen

   } // while ! EOF

   // compute unique Id for each
   for(int i=0;i<Lines.Length;++i) Lines[i].computeUniqueId();

   // print some feedback
   cout<<"\n\n   "<<Lines.Length<<" Transit Lines read from Transit Network: ";
   cout<<this->name<<"\n";

   
}



//---------------------------------------------------------------------------
#pragma package(smart_init)

